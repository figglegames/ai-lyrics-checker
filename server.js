const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Configuration, OpenAIApi } = require('openai');
const fs = require('fs');

const app = express();

// CORS configuration — allow your frontend domain
app.use(cors({
  origin: ['https://ailyricschecker.com', 'https://www.ailyricschecker.com']
}));

app.use(bodyParser.json());

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

app.post('/checkLyrics', async (req, res) => {
  const lyrics = req.body.lyrics;

  const prompt = `You are an expert lyrics analyst.

    Given the following lyrics, determine if they are:
    A) From a published, recognizable human-written song
    B) Likely human-written but unpublished
    C) Possibly AI-generated
    D) Very likely AI-generated

    When deciding, consider the following:
    - Polished, poetic language does not guarantee human authorship.
    - Be cautious with lyrics that use vague or sentimental Americana themes (e.g., "amber hue", "front porch swing", "home collide").
    - If lyrics seem structurally sound but lack personal specificity, emotional nuance, or originality—despite appearing poetic—treat them as potentially AI-generated.
    - Flag patterns that seem stitched together, overly polished, or emotionally hollow.

    Respond in this JSON format:
    {
    "verdict": "...",
    "confidence": ...,
    "explanation": "..."
    }

    Lyrics:
    """${lyrics}"""`;



  try {
    const completion = await openai.createChatCompletion({
      model: "gpt-4-0125-preview",
      temperature: 0.3,
      max_tokens: 150,
      messages: [
        {
          role: "system",
          content: "You are an expert in music and songwriting. When given a set of lyrics, determine whether they are likely written by a human or generated by AI. If the lyrics clearly match or contain a known published song title, recognize that and treat it as human-written. Be concise — respond with a clear verdict and one brief reason."
        },
        {
          role: "user",
          content: `Are these lyrics likely human- or AI-written?\n\n${prompt}`
        }
      ]
    });

    const reply = completion.data.choices[0].message.content.trim();
    // Extract key values for logging
    let parsed;
    try {
        parsed = JSON.parse(reply);
    } catch (e) {
        parsed = { verdict: "Error", confidence: 0, explanation: "Failed to parse reply." };
    }

    const logEntry = {
        timestamp: new Date().toISOString(),
        snippet: lyrics.slice(0, 100).replace(/\n/g, ' '),
        verdict: parsed.verdict,
        confidence: parsed.confidence,
        explanation: parsed.explanation
    };
    
    // Append to log file
    fs.appendFile('lyrics-log.jsonl', JSON.stringify(logEntry) + '\n', err => {
        if (err) console.error('Logging failed:', err);
    });
  
    console.log("GPT Reply:", reply);
    res.setHeader('Content-Type', 'application/json');
    res.send(reply);
  } catch (err) {
    console.error('GPT ERROR:', err);
    res.status(500).json({ error: 'Error analyzing lyrics', details: err.message });
  }
});

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
  console.log(`Lyrics checker running on port ${PORT}`);
});
// force redeploy
